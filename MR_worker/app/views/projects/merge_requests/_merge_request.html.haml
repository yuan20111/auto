%li{ class: mr_css_classes(merge_request) }
  .merge-request-title
    = link_to_gfm truncate(merge_request.title, length: 80), project_merge_request_path(merge_request.target_project, merge_request), class: "row_title"
    - if merge_request.merged?
      %small.pull-right
        %i.fa.fa-check
        MERGED
    - else
      %span.pull-right.hidden-xs
        - if merge_request.for_fork?
          %span.light
            #{merge_request.source_project_namespace}:
        = truncate merge_request.source_branch, length: 25
        %i.fa.fa-angle-right.light
        = merge_request.target_branch
  .merge-request-info
    %span.light= "##{merge_request.iid}"
    - if merge_request.assignee
      assigned to #{link_to_member(merge_request.source_project, merge_request.assignee)}
    - else
      Unassigned
    - if merge_request.votes_count > 0
      = render 'votes/votes_inline', votable: merge_request
    - if merge_request.notes.any?
      %span
        %i.fa.fa-comments
        = merge_request.mr_and_commit_notes.count
    - if merge_request.milestone_id?
      %span
        %i.fa.fa-clock-o
        = merge_request.milestone.title
    - if merge_request.tasks?
      %span.task-status
        = merge_request.task_status

    .pull-right.hidden-xs
      %small updated #{time_ago_with_tooltip(merge_request.updated_at, 'bottom', 'merge_request_updated_ago')}

    .merge-request-labels
      - merge_request.labels.each do |label|
        = link_to project_merge_requests_path(merge_request.project, label_name: label.name) do
          = render_colored_label(label)
